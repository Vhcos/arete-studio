--- a/app/wizard/step-1/page.tsx
+++ b/app/wizard/step-1/page.tsx
@@ -1,6 +1,7 @@
 "use client";
 import { useRouter } from "next/navigation";
-import { useState } from "react";
+import { useEffect, useState } from "react";
+import { useSession } from "next-auth/react";
 import { useWizardStore } from "@/lib/state/wizard-store";
 import { Step1Schema } from "@/lib/validation/wizard";
 import { NextButton, PrevButton } from "@/components/wizard/WizardNav";
@@ -8,13 +9,12 @@
 export default function Step1Page() {
   const router = useRouter();
   const { data, setStep1 } = useWizardStore();
+  const { data: session } = useSession();
   const s1 = data.step1 ?? {};
 
   const [local, setLocal] = useState({
     projectName: s1.projectName ?? "",
     idea: s1.idea ?? "",
-    ubicacion: s1.ubicacion ?? "",
     founderName: s1.founderName ?? "",
     notifyEmail: s1.notifyEmail ?? "",
   });
@@
   function onNext() {
     const parsed = Step1Schema.safeParse(local);
     if (!parsed.success) {
       // TODO: surface validation
       return;
     }
     setStep1(parsed.data);
     router.push("/wizard/step-2");
   }
+
+  // Autofill de email desde sesión (Magic Link / Google) pero editable
+  useEffect(() => {
+    const email = session?.user?.email;
+    if (email && !local.notifyEmail) {
+      setLocal((s) => ({ ...s, notifyEmail: email }));
+    }
+  }, [session?.user?.email, local.notifyEmail]);
 
   return (
     <div>
       <h1 className="text-xl font-semibold mb-1">Paso 1 · Bienvenido a Aret3</h1>
@@
       <label className="block text-sm font-medium mt-4">Nombre del fundador/a</label>
       <input
         className="mt-1 w-full rounded-lg border px-3 py-2"
         placeholder="Tu nombre"
         value={local.founderName}
         onChange={(e) => setLocal((s) => ({ ...s, founderName: e.target.value }))}
       />
-      <label className="block text-sm font-medium mt-4">¿Dónde vas a ejecutar tu negocio?</label>
-      <input
-        className="mt-1 w-full rounded-lg border px-3 py-2"
-        placeholder="Ciudad / Región / País"
-        value={local.ubicacion}
-        onChange={(e) => setLocal((s) => ({ ...s, ubicacion: e.target.value }))}
-      />
+      {/* Ubicación se movió al Paso 2 (Rubro y Ubicación) */}
 
       <div className="mt-6 flex items-center justify-between">
         <PrevButton href="/" />
         <NextButton onClick={onNext} />
       </div>
     </div>
   );
 }
--- a/app/wizard/step-2/page.tsx
+++ b/app/wizard/step-2/page.tsx
@@ -1,19 +1,22 @@
 "use client";
 import { useRouter } from "next/navigation";
 import { useState } from "react";
 import { useWizardStore } from "@/lib/state/wizard-store";
 import { Step2Schema } from "@/lib/validation/wizard";
 import { NextButton, PrevButton } from "@/components/wizard/WizardNav";
 import { SECTORS, SectorId } from "@/lib/model/sectors";
 
 export default function Step2Page() {
   const router = useRouter();
   const { data, setStep2 } = useWizardStore();
 
   const initialSector = (data.step2?.sectorId as SectorId) ?? "tech_saas";
-  const [local, setLocal] = useState({
-    sectorId: initialSector as string,
-    template: data.step2?.template ?? "default",
-  });
+  const [local, setLocal] = useState({
+    sectorId: initialSector as string,
+    template: data.step2?.template ?? "default",
+    // Prefill desde step1 si existía
+    ubicacion: (data.step2?.ubicacion ?? data.step1?.ubicacion ?? "") as string,
+  });
   const [errors, setErrors] = useState<Record<string, string>>({});
 
   function onNext() {
     const parsed = Step2Schema.safeParse(local);
     if (!parsed.success) {
       const e: Record<string, string> = {};
       parsed.error.issues.forEach(i => (e[i.path.join(".")] = i.message));
       setErrors(e);
       return;
     }
     setStep2(parsed.data);
     router.push("/wizard/step-3");
   }
 
   return (
     <div>
-      <h1 className="text-xl font-semibold mb-1">Paso 2 · Rubro en el que estarás y que más se acerque a tu Idea</h1>
+      <h1 className="text-xl font-semibold mb-1">Paso 2 · Rubro y ubicación en el que estarás y que más se acerque a tu Idea</h1>
       <p className="text-sm text-slate-600 mb-6">Elige una de las opciones que se desplegaran.</p>
 
       <div className="mt-2">
         <label className="block text-sm font-medium">Sector</label>
         <select
           className="mt-1 w-full rounded-lg border px-3 py-2"
           value={local.sectorId}
           onChange={(e) => setLocal(s => ({ ...s, sectorId: e.target.value }))}
         >
           {SECTORS.map(s => (
             <option key={s.id} value={s.id}>{s.label}</option>
           ))}
         </select>
         {errors.sectorId && <p className="mt-1 text-xs text-red-600">{errors.sectorId}</p>}
       </div>
 
       <div className="mt-4">
         <label className="block text-sm font-medium">Plantilla</label>
         <select
           className="mt-1 w-full rounded-lg border px-3 py-2"
           value={local.template}
           onChange={(e) => setLocal(s => ({ ...s, template: e.target.value }))}
         >
           <option value="default">Básica</option>
           <option value="lean">Lean Canvas</option>
           <option value="pitch">Pitch / One-pager</option>
         </select>
       </div>
+
+      {/* Ubicación (movida aquí por plantilla) */}
+      <div className="mt-4">
+        <label className="block text-sm font-medium">Ubicación</label>
+        <input
+          className="mt-1 w-full rounded-lg border px-3 py-2"
+          placeholder="Ciudad / Región / País"
+          value={local.ubicacion}
+          onChange={(e) => setLocal(s => ({ ...s, ubicacion: e.target.value }))}
+        />
+      </div>
 
       <div className="mt-8 flex items-center justify-between">
         <PrevButton href="/wizard/step-1" />
         <NextButton onClick={onNext} />
       </div>
     </div>
   );
 }
--- a/lib/validation/wizard.ts
+++ b/lib/validation/wizard.ts
@@ -18,6 +18,8 @@
 export const Step2Schema = z.object({
   sectorId: z.string().min(2, "Selecciona un sector"),
   template: z.enum(["default", "lean", "pitch"]),
+
+  ubicacion: z.string().trim().optional().default(""),
 });
 
 export const Step3Schema = z.object({
--- a/lib/state/wizard-store.ts
+++ b/lib/state/wizard-store.ts
@@ -12,9 +12,9 @@ export type Step1 = {
   notifyEmail?: string;
 };
 
 export type Step2 = {
   sectorId: string;
   template: string;
-  
+  ubicacion?: string;
 };
