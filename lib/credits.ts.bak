/*** apps/app/lib/credits.ts (mod con admins + qty) ***/
import { prisma } from "@/lib/prisma";

/** Admins con crédito ilimitado (no se debita) */
function getAdminEmails(): Set<string> {
  const raw = process.env.ADMIN_EMAILS || "";
  return new Set(
    raw
      .split(",")
      .map((s) => s.trim().toLowerCase())
      .filter(Boolean)
  );
}

async function getUserEmail(userId: string): Promise<string | null> {
  const u = await prisma.user.findUnique({
    where: { id: userId },
    select: { email: true },
  });
  return u?.email ?? null;
}

/**
 * Debita 'qty' créditos (default 1). Idempotente por requestId.
 * Si el usuario está en la whitelist de admins, NO debita.
 */
export async function tryDebitCredit(userId: string, requestId: string, qty: number = 1) {
  // Admin: no debita
  const email = await getUserEmail(userId);
  if (email && getAdminEmails().has(email.toLowerCase())) return { ok: true, skipped: true };

  // idempotencia por requestId
  if (requestId) {
    const already = await prisma.usageEvent.findUnique({ where: { requestId } });
    if (already) return { ok: true, already: true };
  }

  return await prisma.$transaction(async (tx) => {
    const w = await tx.creditWallet.findUnique({ where: { userId } });
    if (!w || w.creditsRemaining < qty) return { ok: false, error: "no_credits" as const };

    await tx.creditWallet.update({
      where: { userId },
      data: { creditsRemaining: { decrement: qty } },
    });

    await tx.usageEvent.create({
      data: { userId, qty, kind: "ai", requestId },
    });

    return { ok: true };
  });
}

export async function refundCredit(userId: string, requestId: string, qty: number = 1) {
  if (!requestId) return;
  const used = await prisma.usageEvent.findUnique({ where: { requestId } });
  if (!used) return;

  await prisma.$transaction(async (tx) => {
    await tx.creditWallet.update({
      where: { userId },
      data: { creditsRemaining: { increment: qty } },
    });
    await tx.usageEvent.create({
      data: { userId, qty, kind: "refund", requestId: `${requestId}:refund` },
    });
  });
}
