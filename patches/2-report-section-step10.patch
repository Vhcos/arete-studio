--- /dev/null
+++ lib/report/sections/step10Panel.ts
@@
+// lib/report/sections/step10Panel.ts
+type K5 =
+  | "urgencia"
+  | "accesibilidad"
+  | "competencia"
+  | "experiencia"
+  | "pasion"
+  | "planesAlternativos"
+  | "toleranciaRiesgo"
+  | "testeoPrevio"
+  | "redApoyo";
+
+const EMO_FIELDS: { key: K5; label: string }[] = [
+  { key: "urgencia", label: "Problema" },
+  { key: "experiencia", label: "Experiencia" },
+  { key: "competencia", label: "Competencia" },
+  { key: "accesibilidad", label: "Acceso cliente" },
+  { key: "toleranciaRiesgo", label: "Riesgo" },
+  { key: "pasion", label: "Pasión" },
+  { key: "testeoPrevio", label: "Testeo" },
+  { key: "redApoyo", label: "Red apoyo" },
+  { key: "planesAlternativos", label: "Plan B" },
+];
+
+const fmtCL = (n: number) =>
+  new Intl.NumberFormat("es-CL", { style: "currency", currency: "CLP", maximumFractionDigits: 0 }).format(Math.round(n || 0));
+
+const deriveCostoUnit = (ticket: number, costoVarPct?: number, costoVarUnit?: number) => {
+  if (typeof costoVarUnit === "number" && costoVarUnit > 0) return Math.min(costoVarUnit, ticket);
+  if (typeof costoVarPct === "number" && costoVarPct > 0) return Math.min((ticket * costoVarPct) / 100, ticket);
+  return 0;
+};
+const calcMcUnit = (ticket: number, costoUnit: number) => Math.max(ticket - costoUnit, 0);
+const toScale3 = (v: unknown) => {
+  const n = Number(v);
+  if (!Number.isFinite(n) || n <= 0) return 0;
+  if (n <= 1) return 1;
+  if (n <= 2) return 2;
+  return 3;
+};
+
+export function renderStep10PanelSection(input: any, tpl?: { gf_sueldoDueno?: number }) {
+  const ticket = Number(input?.ticket) || 0;
+  const costoPct = Number(input?.costoPct) || 0;
+  const costoUnit = Number(input?.costoUnit) || 0;
+  const gastosFijosMes = Number(input?.gastosFijos) || 0;
+  const marketingMensual = Number(input?.marketingMensual) || 0;
+  const mesesPE = Number(input?.mesesPE) || 6;
+  const ingresosMeta = Number(input?.ingresosMeta) || 0;
+  const ventaAnual = Number(input?.ventaAnual ?? input?.ventaAnio1 ?? ingresosMeta * 12) || 0;
+  const costoUnitario = deriveCostoUnit(ticket, costoPct, costoUnit);
+  const mcUnit = calcMcUnit(ticket, costoUnitario);
+  const clientesPE = (mcUnit > 0 && gastosFijosMes > 0) ? Math.ceil(gastosFijosMes / mcUnit) : 0;
+  const ventasPE = clientesPE * ticket;
+  const clientesMesObj = ticket > 0 ? Math.round(ingresosMeta / ticket) : 0;
+  const CAC_est = (marketingMensual > 0 && clientesMesObj > 0) ? Math.round(marketingMensual / clientesMesObj) : NaN;
+  const sueldoDueno = (tpl?.gf_sueldoDueno ? Math.round(ventaAnual * tpl.gf_sueldoDueno) : null);
+
+  const s5: Record<K5, number> = {
+    urgencia: toScale3(input?.urgencia),
+    experiencia: toScale3(input?.experiencia),
+    competencia: toScale3(input?.competencia),
+    accesibilidad: toScale3(input?.accesibilidad),
+    toleranciaRiesgo: toScale3(input?.toleranciaRiesgo),
+    pasion: toScale3(input?.pasion),
+    testeoPrevio: toScale3(input?.testeoPrevio),
+    redApoyo: toScale3(input?.redApoyo),
+    planesAlternativos: toScale3(input?.planesAlternativos),
+  };
+  const radarBox = 240, cx = radarBox/2, cy = radarBox/2, rMax = 90, n = EMO_FIELDS.length;
+  const toXY = (i: number, v: number) => {
+    const angle = ((-90 + (360 / n) * i) * Math.PI) / 180;
+    const r = (Math.max(0, Math.min(3, v)) / 3) * rMax;
+    const x = cx + r * Math.cos(angle), y = cy + r * Math.sin(angle);
+    return `${x},${y}`;
+  };
+  const rings = [1,2,3].map(lvl => {
+    const pts = EMO_FIELDS.map((_, i) => toXY(i, lvl)).join(" ");
+    return `<polygon points="${pts}" fill="none" stroke="#e5e7eb" stroke-dasharray="4 4" />`;
+  }).join("");
+  const poly = (() => {
+    const pts = EMO_FIELDS.map((f, i) => toXY(i, s5[f.key] || 0)).join(" ");
+    return `<polygon points="${pts}" fill="rgba(56,189,248,0.25)" stroke="#38bdf8" stroke-width="2" />`;
+  })();
+  const labels = EMO_FIELDS.map((f, i) => {
+    const angle = ((-90 + (360 / n) * i) * Math.PI) / 180;
+    const r = (3.3/3) * rMax;
+    const x = cx + r * Math.cos(angle), y = cy + r * Math.sin(angle);
+    return `<text x="\${x}" y="\${y}" text-anchor="middle" class="fill-slate-700" font-size="11">\${f.label}</text>`;
+  }).join("");
+
+  const pe = (input?.peCurve?.data ?? []) as Array<{ mes: number; pctPE?: number; resultado?: number }>;
+  const worst = pe.reduce((acc, r) => Math.max(acc, (r?.resultado ?? 0) < 0 ? Math.abs(r.resultado as number) : 1), 1);
+  const bars = pe.map((r) => {
+    const def = (r?.resultado ?? 0) < 0 ? Math.abs(r?.resultado as number) : 0;
+    const h = Math.round((def / worst) * 90);
+    const bar = `<div class="mx-auto w-4 rounded \${def>0?"bg-rose-300":"bg-emerald-300"}" style="height:\${def>0?h:6}px"></div>`;
+    const line = `<div class="absolute bottom-0 left-1/2 -translate-x-1/2 w-0.5 bg-sky-300" style="height:\${Math.min(100, r?.pctPE || 0)}px;opacity:.5"></div>`;
+    return `<div class="relative">\${line}\${bar}<div class="mt-1 text-[10px] text-center text-slate-500">M\${r?.mes}</div></div>`;
+  }).join("");
+
+  return /*html*/`
+  <section class="mt-6 border rounded-2xl p-16 pt-12">
+    <h2 class="text-xl font-semibold mb-2">Panel de Navegación</h2>
+    <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
+      <div class="rounded-xl border p-4">
+        <h4 class="font-medium">Objetivos unitarios</h4>
+        <ul class="mt-2 text-sm space-y-1">
+          <li>Ticket promedio: <b>\${fmtCL(ticket)}</b></li>
+          <li>Costo variable unitario: <b>\${fmtCL(costoUnitario)}</b></li>
+          <li>Margen por unidad: <b>\${fmtCL(mcUnit)}</b></li>
+          <li>CAC (estimado): <b>\${Number.isFinite(CAC_est) ? fmtCL(CAC_est as number) : "—"}</b></li>
+          <li>Clientes para P.E. (mensual): <b>\${clientesPE}</b></li>
+        </ul>
+      </div>
+      <div class="rounded-xl border p-4">
+        <h4 class="font-medium">Operación mensual</h4>
+        <ul class="mt-2 text-sm space-y-1">
+          <li>Gastos fijos: <b>\${fmtCL(gastosFijosMes)}</b></li>
+          <li>Marketing: <b>\${fmtCL(marketingMensual)}</b></li>
+          <li>Meses para llegar al P.E.: <b>\${mesesPE}</b></li>
+          <li>Ventas para P.E. (mensual): <b>\${fmtCL(ventasPE)}</b></li>
+        </ul>
+      </div>
+      <div class="rounded-xl border p-4">
+        <h4 class="font-medium">Grandes indicadores anuales</h4>
+        <ul class="mt-2 text-sm space-y-1">
+          <li>Venta anual: <b>\${fmtCL(ventaAnual)}</b></li>
+          <li>Rentabilidad antes de imp.: <b>\${fmtCL(Number(input?.eerr?.utilidadAntesImp) || 0)}</b></li>
+          <li>Capital de trabajo (déficits 12m): <b>\${fmtCL(Number(input?.peCurve?.acumDeficitUsuario) || 0)}</b></li>
+          <li>Sueldo del dueño: <b>\${sueldoDueno != null ? fmtCL(sueldoDueno) : "—"}</b></li>
+        </ul>
+      </div>
+    </div>
+
+    <div class="mt-6">
+      <div class="flex items/ui gap-2">
+        <h4 class="font-medium">Curva hacia el Punto de Equilibrio (12 meses)</h4>
+        <span class="text-xs text-slate-500">(barras = déficit mensual; línea = avance al P.E.)</span>
+      </div>
+      <div class="mt-3 grid grid-cols-12 gap-2 items-end">\${bars}</div>
+    </div>
+
+    <div class="mt-6 grid grid-cols-1 lg:grid-cols-2 gap-6">
+      <div class="mx-auto w-[210px] sm:w-[240px] aspect-square">
+        <svg viewBox="0 0 \${radarBox} \${radarBox}" width="100%" height="100%" preserveAspectRatio="xMidYMid meet">
+          <g>\${rings}\${poly}\${labels}</g>
+        </svg>
+      </div>
+      <ul class="text-sm text-slate-700 space-y-2">
+        \${EMO_FIELDS.map((f) => {
+          const val = s5[f.key] || 0;
+          return `<li class="flex items-center justify-between rounded-lg border px-3 py-2"><span>\${f.label}</span><span class="font-semibold">\${val ? \`\${val} / 3\` : "—"}</span></li>`;
+        }).join("")}
+        <li class="text-xs text-slate-500">Tip: valores más altos indican mejor base para avanzar en cada aspecto.</li>
+      </ul>
+    </div>
+  </section>
+  `;
+}
