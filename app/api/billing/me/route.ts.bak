import { NextResponse } from "next/server";
import { prisma } from "@/lib/prisma";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth";

export async function GET() {
  const headers = { "Cache-Control": "no-store" };

  const session: any = await getServerSession(authOptions as any);
  const userId = session?.user?.id as string | undefined;

  if (!userId) {
    return NextResponse.json({ ok: false }, { status: 401, headers });
  }

  // Auto-curaci√≥n: si no hay wallet, crear con seed=20 (una sola vez)
  let wallet = await prisma.creditWallet.findUnique({ where: { userId } });
  if (!wallet) {
    wallet = await prisma.creditWallet.create({
      data: {
        userId,
        creditsRemaining: 20, // <<<<<< seed 20
      },
    });
    await prisma.usageEvent.create({
      data: { userId, kind: "seed", qty: 20 }, // <<<<<< registrar seed 20
    });
  }

  return NextResponse.json(
    {
      ok: true,
      creditsRemaining: wallet.creditsRemaining,
      plan: (wallet as any).plan ?? undefined,
    },
    { headers }
  );
}
