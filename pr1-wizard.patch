diff --git a/app/wizard/layout.tsx b/app/wizard/layout.tsx
new file mode 100644
index 0000000..1111111
--- /dev/null
+++ b/app/wizard/layout.tsx
@@ -0,0 +1,41 @@
+import type { ReactNode } from "react";
+import Link from "next/link";
+import { ProgressHeader } from "@/components/wizard/ProgressHeader";
+
+export default function WizardLayout({ children }: { children: ReactNode }) {
+  return (
+    <div className="min-h-screen bg-slate-50 text-slate-900">
+      <header className="border-b bg-white/80 backdrop-blur supports-[backdrop-filter]:bg-white/60 sticky top-0 z-30">
+        <div className="mx-auto max-w-5xl px-4 py-3 flex items-center justify-between">
+          <Link href="/" className="font-semibold tracking-tight">Arete</Link>
+          <ProgressHeader />
+        </div>
+      </header>
+      <main className="mx-auto max-w-3xl px-4 py-8">
+        <div className="bg-white shadow-sm rounded-2xl p-6">{children}</div>
+      </main>
+    </div>
+  );
+}
diff --git a/app/wizard/page.tsx b/app/wizard/page.tsx
new file mode 100644
index 0000000..1111111
--- /dev/null
+++ b/app/wizard/page.tsx
@@ -0,0 +1,6 @@
+import { redirect } from "next/navigation";
+
+export default function Page() {
+  redirect("/wizard/step-1");
+  return null;
+}
diff --git a/app/wizard/step-1/page.tsx b/app/wizard/step-1/page.tsx
new file mode 100644
index 0000000..1111111
--- /dev/null
+++ b/app/wizard/step-1/page.tsx
@@ -0,0 +1,86 @@
+"use client";
+import { useRouter } from "next/navigation";
+import { useState } from "react";
+import { useWizardStore } from "@/lib/state/wizard-store";
+import { Step1Schema } from "@/lib/validation/wizard";
+import { NextButton, PrevButton } from "@/components/wizard/WizardNav";
+
+export default function Step1Page() {
+  const router = useRouter();
+  const { data, setStep1 } = useWizardStore();
+  const [local, setLocal] = useState({
+    projectName: data.step1?.projectName ?? "",
+    shortDescription: data.step1?.shortDescription ?? "",
+    sector: data.step1?.sector ?? "",
+  });
+  const [errors, setErrors] = useState<Record<string, string>>({});
+
+  function onNext() {
+    const parsed = Step1Schema.safeParse(local);
+    if (!parsed.success) {
+      const errs: Record<string, string> = {};
+      parsed.error.issues.forEach(i => (errs[i.path.join(".")] = i.message));
+      setErrors(errs);
+      return;
+    }
+    setStep1(parsed.data);
+    router.push("/wizard/step-2");
+  }
+
+  return (
+    <div>
+      <h1 className="text-xl font-semibold mb-1">Paso 1 · Datos básicos</h1>
+      <p className="text-sm text-slate-600 mb-6">Nombre del proyecto, descripción breve y sector.</p>
+
+      <div className="space-y-5">
+        <div>
+          <label className="block text-sm font-medium">Nombre del proyecto</label>
+          <input
+            className="mt-1 w-full rounded-lg border px-3 py-2 focus:outline-none focus:ring"
+            value={local.projectName}
+            onChange={(e) => setLocal(s => ({ ...s, projectName: e.target.value }))}
+            placeholder="Ej: Joyas Patagonia"
+            aria-invalid={!!errors.projectName}
+            aria-describedby="err-projectName"
+          />
+          {errors.projectName && <p id="err-projectName" className="mt-1 text-xs text-red-600">{errors.projectName}</p>}
+        </div>
+        <div>
+          <label className="block text-sm font-medium">Descripción breve</label>
+          <textarea
+            className="mt-1 w-full rounded-lg border px-3 py-2 focus:outline-none focus:ring"
+            value={local.shortDescription}
+            onChange={(e) => setLocal(s => ({ ...s, shortDescription: e.target.value }))}
+            placeholder="¿Qué problema resuelves en una frase?"
+            rows={3}
+          />
+          {errors.shortDescription && <p className="mt-1 text-xs text-red-600">{errors.shortDescription}</p>}
+        </div>
+        <div>
+          <label className="block text-sm font-medium">Sector o rubro</label>
+          <input
+            className="mt-1 w-full rounded-lg border px-3 py-2 focus:outline-none focus:ring"
+            value={local.sector}
+            onChange={(e) => setLocal(s => ({ ...s, sector: e.target.value }))}
+            placeholder="Retail, SaaS, Educación, etc."
+          />
+          {errors.sector && <p className="mt-1 text-xs text-red-600">{errors.sector}</p>}
+        </div>
+      </div>
+
+      <div className="mt-8 flex items-center justify-between">
+        <PrevButton disabled />
+        <NextButton onClick={onNext} />
+      </div>
+    </div>
+  );
+}
diff --git a/app/wizard/step-2/page.tsx b/app/wizard/step-2/page.tsx
new file mode 100644
index 0000000..1111111
--- /dev/null
+++ b/app/wizard/step-2/page.tsx
@@ -0,0 +1,95 @@
+"use client";
+import { useRouter } from "next/navigation";
+import { useState } from "react";
+import { useWizardStore } from "@/lib/state/wizard-store";
+import { Step2Schema, BusinessType } from "@/lib/validation/wizard";
+import { NextButton, PrevButton } from "@/components/wizard/WizardNav";
+
+const OPTIONS: { value: BusinessType; label: string; hint: string }[] = [
+  { value: "saas", label: "SaaS", hint: "Software como servicio" },
+  { value: "ecommerce", label: "E-commerce", hint: "Tienda online" },
+  { value: "servicio", label: "Servicios", hint: "Consultoría/Agencia" },
+  { value: "producto", label: "Producto físico", hint: "Fabricación/retail" },
+  { value: "restaurante", label: "Restaurante/Food", hint: "Local o dark-kitchen" },
+];
+
+export default function Step2Page() {
+  const router = useRouter();
+  const { data, setStep2 } = useWizardStore();
+  const [local, setLocal] = useState({
+    businessType: (data.step2?.businessType ?? "saas") as BusinessType,
+    template: data.step2?.template ?? "default",
+  });
+  const [errors, setErrors] = useState<Record<string, string>>({});
+
+  function onNext() {
+    const parsed = Step2Schema.safeParse(local);
+    if (!parsed.success) {
+      const errs: Record<string, string> = {};
+      parsed.error.issues.forEach(i => (errs[i.path.join(".")] = i.message));
+      setErrors(errs);
+      return;
+    }
+    setStep2(parsed.data);
+    router.push("/wizard/step-3");
+  }
+
+  return (
+    <div>
+      <h1 className="text-xl font-semibold mb-1">Paso 2 · Tipo de negocio / plantilla</h1>
+      <p className="text-sm text-slate-600 mb-6">Selecciona el arquetipo que mejor calza con tu proyecto. Podrás cambiarlo luego.</p>
+
+      <div className="grid sm:grid-cols-2 gap-4">
+        {OPTIONS.map(op => (
+          <button
+            key={op.value}
+            onClick={() => setLocal(s => ({ ...s, businessType: op.value }))}
+            className={`text-left rounded-xl border p-4 hover:border-slate-800 focus:outline-none focus:ring ${local.businessType === op.value ? "border-slate-900 ring-1" : "border-slate-200"}`}
+            aria-pressed={local.businessType === op.value}
+          >
+            <div className="font-medium">{op.label}</div>
+            <div className="text-xs text-slate-600">{op.hint}</div>
+          </button>
+        ))}
+      </div>
+
+      <div className="mt-6">
+        <label className="block text-sm font-medium">Plantilla</label>
+        <select
+          className="mt-1 w-full rounded-lg border px-3 py-2"
+          value={local.template}
+          onChange={(e) => setLocal(s => ({ ...s, template: e.target.value }))}
+        >
+          <option value="default">Básica (recomendada)</option>
+          <option value="lean">Lean Canvas</option>
+          <option value="pitch">Pitch / One-pager</option>
+        </select>
+        {errors.template && <p className="mt-1 text-xs text-red-600">{errors.template}</p>}
+      </div>
+
+      <div className="mt-8 flex items-center justify-between">
+        <PrevButton href="/wizard/step-1" />
+        <NextButton onClick={onNext} />
+      </div>
+    </div>
+  );
+}
diff --git a/app/wizard/step-3/page.tsx b/app/wizard/step-3/page.tsx
new file mode 100644
index 0000000..1111111
--- /dev/null
+++ b/app/wizard/step-3/page.tsx
@@ -0,0 +1,112 @@
+"use client";
+import { useRouter } from "next/navigation";
+import { useState } from "react";
+import { useWizardStore } from "@/lib/state/wizard-store";
+import { Step3Schema, Stage } from "@/lib/validation/wizard";
+import { NextButton, PrevButton } from "@/components/wizard/WizardNav";
+
+export default function Step3Page() {
+  const router = useRouter();
+  const { data, setStep3 } = useWizardStore();
+  const [local, setLocal] = useState({
+    headline: data.step3?.headline ?? "",
+    country: data.step3?.country ?? "Chile",
+    city: data.step3?.city ?? "Santiago",
+    stage: (data.step3?.stage ?? "idea") as Stage,
+  });
+  const [errors, setErrors] = useState<Record<string, string>>({});
+
+  function onNext() {
+    const parsed = Step3Schema.safeParse(local);
+    if (!parsed.success) {
+      const errs: Record<string, string> = {};
+      parsed.error.issues.forEach(i => (errs[i.path.join(".")] = i.message));
+      setErrors(errs);
+      return;
+    }
+    setStep3(parsed.data);
+    router.push("/wizard/step-4");
+  }
+
+  return (
+    <div>
+      <h1 className="text-xl font-semibold mb-1">Paso 3 · Contexto</h1>
+      <p className="text-sm text-slate-600 mb-6">Tu “brillante idea”, país/ciudad y etapa.</p>
+
+      <div className="space-y-5">
+        <div>
+          <label className="block text-sm font-medium">Brillante idea (headline)</label>
+          <input
+            className="mt-1 w-full rounded-lg border px-3 py-2"
+            value={local.headline}
+            onChange={(e) => setLocal(s => ({ ...s, headline: e.target.value }))}
+            placeholder="La forma más simple de evaluar tu idea en 2 minutos"
+          />
+          {errors.headline && <p className="mt-1 text-xs text-red-600">{errors.headline}</p>}
+        </div>
+        <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
+          <div>
+            <label className="block text-sm font-medium">País</label>
+            <input
+              className="mt-1 w-full rounded-lg border px-3 py-2"
+              value={local.country}
+              onChange={(e) => setLocal(s => ({ ...s, country: e.target.value }))}
+            />
+            {errors.country && <p className="mt-1 text-xs text-red-600">{errors.country}</p>}
+          </div>
+          <div>
+            <label className="block text-sm font-medium">Ciudad</label>
+            <input
+              className="mt-1 w-full rounded-lg border px-3 py-2"
+              value={local.city}
+              onChange={(e) => setLocal(s => ({ ...s, city: e.target.value }))}
+            />
+            {errors.city && <p className="mt-1 text-xs text-red-600">{errors.city}</p>}
+          </div>
+        </div>
+        <fieldset>
+          <legend className="block text-sm font-medium">Etapa</legend>
+          <div className="mt-2 flex gap-3">
+            {(["idea","launch","growth"] as const).map(v => (
+              <label key={v} className={`px-3 py-1.5 rounded-full border cursor-pointer ${local.stage === v ? "border-slate-900" : "border-slate-200"}`}>
+                <input
+                  type="radio"
+                  name="stage"
+                  className="sr-only"
+                  checked={local.stage === v}
+                  onChange={() => setLocal(s => ({ ...s, stage: v }))}
+                />
+                {v === "idea" ? "Idea" : v === "launch" ? "Lanzamiento" : "Crecimiento"}
+              </label>
+            ))}
+          </div>
+          {errors.stage && <p className="mt-1 text-xs text-red-600">{errors.stage}</p>}
+        </fieldset>
+      </div>
+
+      <div className="mt-8 flex items-center justify-between">
+        <PrevButton href="/wizard/step-2" />
+        <NextButton onClick={onNext} />
+      </div>
+    </div>
+  );
+}
diff --git a/app/wizard/step-4/page.tsx b/app/wizard/step-4/page.tsx
new file mode 100644
index 0000000..1111111
--- /dev/null
+++ b/app/wizard/step-4/page.tsx
@@ -0,0 +1,61 @@
+"use client";
+import { useRouter } from "next/navigation";
+import { useWizardStore } from "@/lib/state/wizard-store";
+import { PrevButton } from "@/components/wizard/WizardNav";
+import { useState } from "react";
+
+// PR-1: sin DB ni API. Ajusta esta ruta cuando conectemos el submit real.
+const NEXT_STEP_PATH = "/";
+
+export default function Step4Page() {
+  const router = useRouter();
+  const { data, clear } = useWizardStore();
+  const [loading, setLoading] = useState(false);
+
+  async function onFinish() {
+    setLoading(true);
+    try {
+      // Stub: en PR-5 haremos POST a /api/wizard/submit y redirigiremos a Tablero+Informe.
+      console.log("[Wizard] Datos listos para enviar:", data);
+      clear();
+      router.push(NEXT_STEP_PATH);
+    } finally {
+      setLoading(false);
+    }
+  }
+
+  return (
+    <div>
+      <h1 className="text-xl font-semibold mb-1">Paso 4 · Confirmación</h1>
+      <p className="text-sm text-slate-600 mb-6">Revisa y envía. (En el siguiente PR guardaremos en tu cuenta y abriremos el informe.)</p>
+
+      <pre className="bg-slate-50 border rounded-lg p-3 overflow-x-auto text-sm">{JSON.stringify(data, null, 2)}</pre>
+
+      <div className="mt-8 flex items-center justify-between">
+        <PrevButton href="/wizard/step-3" />
+        <button
+          onClick={onFinish}
+          disabled={loading}
+          className="inline-flex items-center justify-center rounded-lg bg-slate-900 px-4 py-2 text-white hover:bg-slate-800 focus:outline-none focus:ring disabled:opacity-60"
+        >
+          {loading ? "Procesando…" : "Finalizar (stub)"}
+        </button>
+      </div>
+    </div>
+  );
+}
diff --git a/components/wizard/ProgressHeader.tsx b/components/wizard/ProgressHeader.tsx
new file mode 100644
index 0000000..1111111
--- /dev/null
+++ b/components/wizard/ProgressHeader.tsx
@@ -0,0 +1,44 @@
+"use client";
+import { usePathname } from "next/navigation";
+
+const steps = [
+  { slug: "/wizard/step-1", label: "Datos" },
+  { slug: "/wizard/step-2", label: "Tipo" },
+  { slug: "/wizard/step-3", label: "Contexto" },
+  { slug: "/wizard/step-4", label: "Confirmar" },
+];
+
+export function ProgressHeader() {
+  const pathname = usePathname();
+  const idx = steps.findIndex((s) => pathname?.startsWith(s.slug));
+  const currentIndex = idx === -1 ? 0 : idx;
+  const pct = Math.round(((currentIndex + 1) / steps.length) * 100);
+
+  return (
+    <div className="w-full max-w-lg">
+      <div className="flex items-center justify-between text-xs text-slate-600 mb-1">
+        <span>Progreso</span>
+        <span>{pct}%</span>
+      </div>
+      <div className="h-2 w-full rounded-full bg-slate-200 overflow-hidden" aria-label={`Progreso ${pct}%`}>
+        <div className="h-2 bg-slate-900" style={{ width: `${pct}%` }} />
+      </div>
+      <ul className="mt-2 flex items-center justify-between text-[11px] text-slate-500">
+        {steps.map((s, i) => (
+          <li key={s.slug} className={`truncate ${i <= currentIndex ? "text-slate-900" : ""}`}>{s.label}</li>
+        ))}
+      </ul>
+    </div>
+  );
+}
diff --git a/components/wizard/WizardNav.tsx b/components/wizard/WizardNav.tsx
new file mode 100644
index 0000000..1111111
--- /dev/null
+++ b/components/wizard/WizardNav.tsx
@@ -0,0 +1,27 @@
+"use client";
+import Link from "next/link";
+
+export function PrevButton({ href = "", disabled = false }: { href?: string; disabled?: boolean }) {
+  if (disabled) {
+    return (
+      <button disabled className="rounded-lg border px-4 py-2 text-slate-500 opacity-60">Atrás</button>
+    );
+  }
+  return (
+    <Link href={href} className="rounded-lg border px-4 py-2 hover:bg-slate-50 focus:outline-none focus:ring">
+      Atrás
+    </Link>
+  );
+}
+
+export function NextButton({ onClick }: { onClick: () => void }) {
+  return (
+    <button
+      onClick={onClick}
+      className="inline-flex items-center justify-center rounded-lg bg-slate-900 px-4 py-2 text-white hover:bg-slate-800 focus:outline-none focus:ring"
+    >
+      Siguiente
+    </button>
+  );
+}
diff --git a/lib/state/wizard-store.ts b/lib/state/wizard-store.ts
new file mode 100644
index 0000000..1111111
--- /dev/null
+++ b/lib/state/wizard-store.ts
@@ -0,0 +1,39 @@
+"use client";
+import { create } from "zustand";
+import { persist, createJSONStorage } from "zustand/middleware";
+import type { Step1, Step2, Step3 } from "@/lib/validation/wizard";
+
+export type WizardData = {
+  step1?: Step1;
+  step2?: Step2;
+  step3?: Step3;
+  createdAt?: string;
+};
+
+interface WizardStore {
+  data: WizardData;
+  setStep1: (v: Step1) => void;
+  setStep2: (v: Step2) => void;
+  setStep3: (v: Step3) => void;
+  clear: () => void;
+}
+
+export const useWizardStore = create<WizardStore>()(
+  persist(
+    (set, get) => ({
+      data: { createdAt: new Date().toISOString() },
+      setStep1: (v) => set({ data: { ...get().data, step1: v } }),
+      setStep2: (v) => set({ data: { ...get().data, step2: v } }),
+      setStep3: (v) => set({ data: { ...get().data, step3: v } }),
+      clear: () => set({ data: { createdAt: new Date().toISOString() } }),
+    }),
+    {
+      name: "arete-wizard",
+      storage: createJSONStorage(() => localStorage),
+      version: 1,
+      partialize: (s) => s,
+    }
+  )
+);
diff --git a/lib/validation/wizard.ts b/lib/validation/wizard.ts
new file mode 100644
index 0000000..1111111
--- /dev/null
+++ b/lib/validation/wizard.ts
@@ -0,0 +1,30 @@
+import { z } from "zod";
+
+export const Step1Schema = z.object({
+  projectName: z.string().min(2, "Mínimo 2 caracteres").max(60),
+  shortDescription: z.string().max(200).optional().or(z.literal("")),
+  sector: z.string().min(2, "Indica un sector"),
+});
+export type Step1 = z.infer<typeof Step1Schema>;
+
+export const businessTypeValues = ["saas","ecommerce","servicio","producto","restaurante"] as const;
+export type BusinessType = typeof businessTypeValues[number];
+
+export const Step2Schema = z.object({
+  businessType: z.enum(businessTypeValues),
+  template: z.string().min(2),
+});
+export type Step2 = z.infer<typeof Step2Schema>;
+
+export const stageValues = ["idea","launch","growth"] as const;
+export type Stage = typeof stageValues[number];
+
+export const Step3Schema = z.object({
+  headline: z.string().min(6, "Describe tu propuesta en una frase"),
+  country: z.string().min(2),
+  city: z.string().min(2),
+  stage: z.enum(stageValues),
+});
+export type Step3 = z.infer<typeof Step3Schema>;
